/*
Copyright (C) 2013 Adam Schwartz, http://adamschwartz.co

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

(function () {
  var SELECTOR, addEventListener, clickEvents, numberRegExp, sortable, touchDevice, trimRegExp;

  SELECTOR = 'table[data-sortable]';

  numberRegExp = /^-?[Â£$Â¤]?[\d,.]+%?$/;

  trimRegExp = /^\s+|\s+$/g;

  clickEvents = ['click'];

  touchDevice = 'ontouchstart' in document.documentElement;

  if (touchDevice) {
    clickEvents.push('touchstart');
  }

  addEventListener = function addEventListener(el, event, handler) {
    if (el.addEventListener != null) {
      return el.addEventListener(event, handler, false);
    } else {
      return el.attachEvent("on" + event, handler);
    }
  };

  sortable = {
    init: function init(options) {
      var table, tables, _i, _len, _results;
      if (options == null) {
        options = {};
      }
      if (options.selector == null) {
        options.selector = SELECTOR;
      }
      tables = document.querySelectorAll(options.selector);
      _results = [];
      for (_i = 0, _len = tables.length; _i < _len; _i++) {
        table = tables[_i];
        _results.push(sortable.initTable(table));
      }
      return _results;
    },
    initTable: function initTable(table) {
      var i, th, ths, _i, _len, _ref;
      if (((_ref = table.tHead) != null ? _ref.rows.length : void 0) !== 1) {
        return;
      }
      if (table.getAttribute('data-sortable-initialized') === 'true') {
        return;
      }
      table.setAttribute('data-sortable-initialized', 'true');
      ths = table.querySelectorAll('th');
      for (i = _i = 0, _len = ths.length; _i < _len; i = ++_i) {
        th = ths[i];
        if (th.getAttribute('data-sortable') !== 'false') {
          sortable.setupClickableTH(table, th, i);
        }
      }
      return table;
    },
    setupClickableTH: function setupClickableTH(table, th, i) {
      var eventName, onClick, type, _i, _len, _results;
      type = sortable.getColumnType(table, i);
      onClick = function onClick(e) {
        var compare, item, newSortedDirection, position, row, rowArray, sorted, sortedDirection, tBody, ths, value, _compare, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1;
        if (e.handled !== true) {
          e.handled = true;
        } else {
          return false;
        }
        sorted = this.getAttribute('data-sorted') === 'true';
        sortedDirection = this.getAttribute('data-sorted-direction');
        if (sorted) {
          newSortedDirection = sortedDirection === 'ascending' ? 'descending' : 'ascending';
        } else {
          newSortedDirection = type.defaultSortDirection;
        }
        ths = this.parentNode.querySelectorAll('th');
        for (_i = 0, _len = ths.length; _i < _len; _i++) {
          th = ths[_i];
          th.setAttribute('data-sorted', 'false');
          th.removeAttribute('data-sorted-direction');
        }
        this.setAttribute('data-sorted', 'true');
        this.setAttribute('data-sorted-direction', newSortedDirection);
        tBody = table.tBodies[0];
        rowArray = [];
        if (!sorted) {
          if (type.compare != null) {
            _compare = type.compare;
          } else {
            _compare = function _compare(a, b) {
              return b - a;
            };
          }
          compare = function compare(a, b) {
            if (a[0] === b[0]) {
              return a[2] - b[2];
            }
            if (type.reverse) {
              return _compare(b[0], a[0]);
            } else {
              return _compare(a[0], b[0]);
            }
          };
          _ref = tBody.rows;
          for (position = _j = 0, _len1 = _ref.length; _j < _len1; position = ++_j) {
            row = _ref[position];
            value = sortable.getNodeValue(row.cells[i]);
            if (type.comparator != null) {
              value = type.comparator(value);
            }
            rowArray.push([value, row, position]);
          }
          rowArray.sort(compare);
          for (_k = 0, _len2 = rowArray.length; _k < _len2; _k++) {
            row = rowArray[_k];
            tBody.appendChild(row[1]);
          }
        } else {
          _ref1 = tBody.rows;
          for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
            item = _ref1[_l];
            rowArray.push(item);
          }
          rowArray.reverse();
          for (_m = 0, _len4 = rowArray.length; _m < _len4; _m++) {
            row = rowArray[_m];
            tBody.appendChild(row);
          }
        }
        if (typeof window['CustomEvent'] === 'function') {
          return typeof table.dispatchEvent === "function" ? table.dispatchEvent(new CustomEvent('Sortable.sorted', {
            bubbles: true
          })) : void 0;
        }
      };
      _results = [];
      for (_i = 0, _len = clickEvents.length; _i < _len; _i++) {
        eventName = clickEvents[_i];
        _results.push(addEventListener(th, eventName, onClick));
      }
      return _results;
    },
    getColumnType: function getColumnType(table, i) {
      var row, specified, text, type, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      specified = (_ref = table.querySelectorAll('th')[i]) != null ? _ref.getAttribute('data-sortable-type') : void 0;
      if (specified != null) {
        return sortable.typesObject[specified];
      }
      _ref1 = table.tBodies[0].rows;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        row = _ref1[_i];
        text = sortable.getNodeValue(row.cells[i]);
        _ref2 = sortable.types;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          type = _ref2[_j];
          if (type.match(text)) {
            return type;
          }
        }
      }
      return sortable.typesObject.alpha;
    },
    getNodeValue: function getNodeValue(node) {
      var dataValue;
      if (!node) {
        return '';
      }
      dataValue = node.getAttribute('data-value');
      if (dataValue !== null) {
        return dataValue;
      }
      if (typeof node.innerText !== 'undefined') {
        return node.innerText.replace(trimRegExp, '');
      }
      return node.textContent.replace(trimRegExp, '');
    },
    setupTypes: function setupTypes(types) {
      var type, _i, _len, _results;
      sortable.types = types;
      sortable.typesObject = {};
      _results = [];
      for (_i = 0, _len = types.length; _i < _len; _i++) {
        type = types[_i];
        _results.push(sortable.typesObject[type.name] = type);
      }
      return _results;
    }
  };

  sortable.setupTypes([{
    name: 'numeric',
    defaultSortDirection: 'descending',
    match: function match(a) {
      return a.match(numberRegExp);
    },
    comparator: function comparator(a) {
      return parseFloat(a.replace(/[^0-9.-]/g, ''), 10) || 0;
    }
  }, {
    name: 'date',
    defaultSortDirection: 'ascending',
    reverse: true,
    match: function match(a) {
      // never match unless explicitly told to run a date through attribute settings
      return false;
    },
    comparator: function comparator(a) {
      var aArray = a.split('/');
      // ISO = YYYY MM DD - remember that months are 0 based
      var dateA = new Date(aArray[2], aArray[0] - 1, aArray[1]);
      return dateA || 0;
    }
  }, {
    name: 'alpha',
    defaultSortDirection: 'ascending',
    match: function match() {
      return true;
    },
    compare: function compare(a, b) {
      return a.localeCompare(b);
    }
  }]);

  setTimeout(sortable.init, 0);

  if (typeof define === 'function' && define.amd) {
    define(function () {
      return sortable;
    });
  } else if (typeof exports !== 'undefined') {
    module.exports = sortable;
  } else {
    window.Sortable = sortable;
  }
}).call(this);
(function () {
  var fileSelect = document.getElementById('fileSelect');
  var fileInput = document.getElementById('fileInput');
  var browse = document.getElementById('browse');
  var table = document.getElementById('people');
  var tableBody = document.getElementById('people-body');
  var tableHeaderElements = document.getElementsByTagName('th');
  var peopleCount = document.getElementById('peopleCount');

  function resetSortStatus(elements) {
    for (var i = 0; i < elements.length; i++) {
      elements[i].removeAttribute('data-sorted');
      elements[i].removeAttribute('data-sorted-direction');
    }
  }

  function buildTdElem(type, value, image) {
    if (image) {
      return '<td class="i"><span class="' + type + '"></span>' + value + '</td>';
    } else {
      return '<td class="' + type + '">' + value + '</td>';
    }
  }

  fileSelect.addEventListener('click', function (e) {
    if (fileSelect) {
      fileInput.click();
    }
  });

  browse.addEventListener('click', function (e) {
    if (fileInput) {
      fileInput.click();
    }
  });

  fileInput.addEventListener('change', function (e) {
    e.preventDefault();
    data = new FormData();
    data.append("csv", fileInput.files[0]);
    var req = new Request('/upload', {
      method: 'POST',
      body: data
    });

    // insert the name of the file last sent into the fileSelect element
    fileSelect.innerHTML = fileInput.files[0].name;
    fileInput.value = '';

    fetch(req).then(function (res) {
      if (res.ok) {
        contentType = res.headers.get('Content-Type');
        if (contentType && contentType.includes('application/json')) {
          return res.json();
        }
      }
    }).then(function (data) {
      table.setAttribute('data-sortable-initialized', false);
      resetSortStatus(tableHeaderElements);
      var trHTML = '';
      data.forEach(function (value) {
        trHTML += '<tr>';
        trHTML += buildTdElem('last', value.last, false);
        trHTML += buildTdElem('first', value.first, false);
        if (value.m === 'None') {
          trHTML += buildTdElem('none', value.m, false);
        } else {
          trHTML += buildTdElem('m', value.m, false);
        }
        trHTML += buildTdElem(value.pet.toLowerCase(), value.pet, true);
        trHTML += buildTdElem('birthday', value.birthday, false);
        trHTML += buildTdElem('color', value.color, false);
        trHTML += '</tr>';
      });
      tableBody.insertAdjacentHTML('beforeend', trHTML);
      Sortable.init();

      var rows = table.getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
      peopleCount.innerHTML = rows;
    }).catch(function (err) {
      console.log(err);
    });
  }, false);
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
